// src/services/aiService.ts
import { CVData, JobDescription } from '../types';
import { MultiAIService } from './multiAiService';

// Servi√ßo principal que orquestra a otimiza√ß√£o de CV
export class AIService {
  static async optimizeCV(pdfFile: File, jobDescription: string): Promise<CVData> {
    try {
      console.log('üöÄ Iniciando extra√ß√£o de texto do PDF...');
      
      // Extrai texto real do PDF
      const cvText = await this.extractTextFromPDF(pdfFile);
      
      console.log('üìÑ Texto extra√≠do, enviando para IA...');
      
      // Chama o servi√ßo multi-API para otimiza√ß√£o
      const optimizedCV = await MultiAIService.optimizeCV(cvText, jobDescription);
      
      console.log('‚úÖ CV otimizado com sucesso!');
      return optimizedCV;
      
    } catch (error) {
      console.error('‚ùå Erro na otimiza√ß√£o do CV:', error);
      throw error; // Propaga o erro real sem fallback
    }
  }

  static async extractJobRequirements(jobDescription: string): Promise<JobDescription> {
    // An√°lise b√°sica da descri√ß√£o da vaga
    const lines = jobDescription.toLowerCase().split('\n');
    const requirements: string[] = [];
    const keywords: string[] = [];
    
    let title = "Posi√ß√£o Profissional";
    let company = "Empresa";
    
    // Extrai t√≠tulo da vaga
    const titleMatches = jobDescription.match(/(?:vaga|cargo|posi√ß√£o|oportunidade)[\s:]*(.+?)(?:\n|$)/i);
    if (titleMatches) {
      title = titleMatches[1].trim();
    }
    
    // Extrai nome da empresa
    const companyMatches = jobDescription.match(/(?:empresa|companhia|organiza√ß√£o)[\s:]*(.+?)(?:\n|$)/i);
    if (companyMatches) {
      company = companyMatches[1].trim();
    }
    
    // Identifica requisitos comuns
    lines.forEach(line => {
      if (line.includes('requisito') || line.includes('experi√™ncia') || line.includes('conhecimento')) {
        requirements.push(line.trim());
      }
      
      // Extrai palavras-chave t√©cnicas comuns (universais)
      const techKeywords = [
        // Programa√ß√£o e Desenvolvimento
        'excel', 'powerbi', 'sql', 'python', 'javascript', 'react', 'node', 'java', 'c#', '.net',
        'html', 'css', 'typescript', 'angular', 'vue', 'php', 'ruby', 'go', 'swift', 'kotlin',
        
        // Gest√£o e Neg√≥cios
        'gest√£o', 'lideran√ßa', 'projetos', 'scrum', 'agile', 'kanban', 'pmp', 'lean', 'six sigma',
        'vendas', 'marketing', 'crm', 'negocia√ß√£o', 'atendimento', 'relacionamento',
        
        // √Åreas Espec√≠ficas
        'sa√∫de', 'enfermagem', 'medicina', 'psicologia', 'fisioterapia', 'farm√°cia',
        'direito', 'jur√≠dico', 'advocacia', 'contratos', 'compliance', 'tribut√°rio',
        'finan√ßas', 'contabilidade', 'auditoria', 'controladoria', 'fiscal',
        'rh', 'recursos humanos', 'recrutamento', 'sele√ß√£o', 'treinamento',
        'educa√ß√£o', 'ensino', 'pedagogia', 'did√°tica', 'coordena√ß√£o',
        'engenharia', 'civil', 'mec√¢nica', 'el√©trica', 'produ√ß√£o', 'qualidade',
        
        // Tecnologias Emergentes
        'ia', 'intelig√™ncia artificial', 'machine learning', 'ai', 'deep learning',
        'low code', 'no code', 'automa√ß√£o', 'rpa', 'chatbot',
        'apis', 'rest', 'microservi√ßos', 'webhooks', 'scraping', 'integra√ß√µes',
        'cloud', 'aws', 'azure', 'google cloud', 'docker', 'kubernetes',
        'saas', 'devops', 'ci/cd', 'git', 'github', 'gitlab',
        
        // Dados e Analytics
        'dados', 'analytics', 'bi', 'business intelligence', 'tableau', 'qlik',
        'big data', 'hadoop', 'spark', 'elasticsearch', 'mongodb', 'postgresql',
        'mysql', 'oracle', 'redis', 'nosql'
      ];
      
      techKeywords.forEach(keyword => {
        if (line.includes(keyword) && !keywords.includes(keyword)) {
          keywords.push(keyword);
        }
      });
    });
    
    return {
      title,
      company,
      description: jobDescription,
      requirements: requirements.slice(0, 15),
      keywords: keywords.slice(0, 20)
    };
  }

  private static async extractTextFromPDF(file: File): Promise<string> {
    // Tentar usar PDF.js para extra√ß√£o real
    try {
      // Importa√ß√£o din√¢mica do PDF.js
      const pdfjsLib = await import('pdfjs-dist');
      
      // Configurar worker
      pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`;
      
      const arrayBuffer = await file.arrayBuffer();
      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
      
      let fullText = '';
      
      // Extrair texto de todas as p√°ginas
      for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
        const page = await pdf.getPage(pageNum);
        const textContent = await page.getTextContent();
        
        const pageText = textContent.items
          .map((item: any) => item.str)
          .join(' ');
        
        fullText += pageText + '\n';
      }
      
      if (!fullText.trim()) {
        throw new Error('N√£o foi poss√≠vel extrair texto do PDF');
      }
      
      console.log('‚úÖ Texto extra√≠do com sucesso do PDF');
      return fullText.trim();
      
    } catch (error) {
      console.error('‚ùå Erro na extra√ß√£o do PDF:', error);
      throw new Error(`Falha ao extrair texto do PDF: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }
}